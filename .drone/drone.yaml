#####################################################################
# Description:  drone.yaml
#
#               This file, 'drone.yaml', implements the builder/tester CI/CD
#               workflow for Debian based systems on amd64, arm64 and armhf
#               architectures.
#
# Copyright (C) 2020       Jakub Fi≈°er <jakub DOT fiser AT eryaf DOT com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
######################################################################

# To run on Drone Cloud CI, log into https://cloud.drone.io/ with GitHub
# credentials, activate your fork of Machinekit-HAL repository and in Settings
# set the Configuration to '.drone/drone.yaml'

# This is the first and provisional version of Drone Cloud configuration file.
# It is going to be redone so the actual configuration is done in short script
# and then autogenerated to this file by way of git hook on logic change

# Issue with Docker runtime -> uncomment when the newer one with this bug resolved
# is deployed to Drone Cloud

kind: pipeline
name: Test build from binary TREE on Ubuntu 21.04 amd64

platform:
  arch: amd64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: ubuntu:hirsute
    failure: ignore
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
kind: pipeline
name: Test build from binary TREE on ubuntu 21.04 arm64

platform:
  arch: arm64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: ubuntu:hirsute
    failure: ignore
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
# =======================================================================================
# Currently no pre-compiled version of CMake 3.22 is available for 'armhf' architecture
# =======================================================================================

#kind: pipeline
#name: Test build from binary TREE on Ubuntu 21.04 armhf
#
#platform:
#  arch: arm
#
#clone:
#  disable: true
#
#steps:
#- name: Prepare Docker Drone volume
#  image: debian:buster
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - chown 1000:1000 /build
#
#- name: Clone Machinekit-HAL repository
#  image: debian:buster
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - apt-get update
#  - apt-get install -y git
#  - addgroup --gid 1000 git
#  - |
#    adduser --uid 1000 --ingroup git --home /home/git \
#      --disabled-password --gecos "" git;
#  - |
#    su git -c "
#      git init /build/machinekit-hal;
#      git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
#      git -C /build/machinekit-hal config --local gc.auto 0;
#      if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules \
#          origin +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/* \
#          +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#        git -C /build/machinekit-hal checkout --progress --force \
#          refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#      elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules origin \
#          +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/*;
#        git -C /build/machinekit-hal checkout --progress --force \
#          -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
#      else
#        printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
#        exit 1;
#      fi
#      git -C /build/machinekit-hal log -1;"
#
#- name: Build and run tests
#  image: arm32v7/ubuntu:hirsute
#  failure: ignore
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - uname -a
#  - uname -m
#  - >
#    export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
#    ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
#  - apt-get update
#  - apt-get -y upgrade
#  - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
#  - |
#    echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
#  - |
#    curl -1sLf                                                                      \
#      'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
#      | bash
#  - addgroup --gid 1000 machinekit
#  - |
#    adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
#      --disabled-password --gecos "" machinekit;
#  - |
#    curl -1vLf \
#      $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
#      jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
#      '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
#      --output /tmp/cmake.sh
#  - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
#  - |
#    su machinekit -c "whoami; \
#      cd /build/machinekit-hal; \
#      debian/bootstrap; \
#      mk-build-deps -irs sudo -t                                              \
#        'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
#      debian/runtests.py -j 12;"
#
#volumes:
#- name: repository
#  user: 1000
#  group: 1000
#  temp: {}
#
#---

kind: pipeline
name: Test build from binary TREE on Ubuntu 20.04 amd64

platform:
  arch: amd64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: ubuntu:focal
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
kind: pipeline
name: Test build from binary TREE on ubuntu 20.04 arm64

platform:
  arch: arm64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: ubuntu:focal
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
#kind: pipeline
#name: Test build from binary TREE on Ubuntu 20.04 armhf
#
#platform:
#  arch: arm
#
#clone:
#  disable: true
#
#steps:
#- name: Prepare Docker Drone volume
#  image: debian:buster
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - chown 1000:1000 /build
#
#- name: Clone Machinekit-HAL repository
#  image: debian:buster
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - apt-get update
#  - apt-get install -y git
#  - addgroup --gid 1000 git
#  - |
#    adduser --uid 1000 --ingroup git --home /home/git \
#      --disabled-password --gecos "" git;
#  - |
#    su git -c "
#      git init /build/machinekit-hal;
#      git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
#      git -C /build/machinekit-hal config --local gc.auto 0;
#      if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules \
#          origin +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/* \
#          +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#        git -C /build/machinekit-hal checkout --progress --force \
#          refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#      elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules origin \
#          +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/*;
#        git -C /build/machinekit-hal checkout --progress --force \
#          -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
#      else
#        printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
#        exit 1;
#      fi
#      git -C /build/machinekit-hal log -1;"
#
#- name: Build and run tests
#  image: arm32v7/ubuntu:focal
#  failure: ignore
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - uname -a
#  - uname -m
#  - >
#    export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
#    ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
#  - apt-get update
#  - apt-get -y upgrade
#  - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs
#  - |
#    echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
#  - |
#    curl -1sLf                                                                      \
#      'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
#      | bash
#  - addgroup --gid 1000 machinekit
#  - |
#    adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
#      --disabled-password --gecos "" machinekit;
#  - |
#    su machinekit -c "whoami; \
#      cd /build/machinekit-hal; \
#      debian/bootstrap; \
#      mk-build-deps -irs sudo -t                                              \
#        'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
#      debian/ripruntests.py;"
#
#volumes:
#- name: repository
#  user: 1000
#  group: 1000
#  temp: {}
#
#---
kind: pipeline
name: Test build from binary TREE on Debian 11 amd64

platform:
  arch: amd64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: debian:bullseye
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
kind: pipeline
name: Test build from binary TREE on Debian 11 arm64

platform:
  arch: arm64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: debian:bullseye
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
#kind: pipeline
#name: Test build from binary TREE on Debian 10 armhf
#
#platform:
#  arch: arm
#
#clone:
#  disable: true
#
#steps:
#- name: Prepare Docker Drone volume
#  image: debian:buster
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - chown 1000:1000 /build
#
#- name: Clone Machinekit-HAL repository
#  image: debian:buster
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - apt-get update
#  - apt-get install -y git
#  - addgroup --gid 1000 git
#  - |
#    adduser --uid 1000 --ingroup git --home /home/git \
#      --disabled-password --gecos "" git;
#  - |
#    su git -c "
#      git init /build/machinekit-hal;
#      git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
#      git -C /build/machinekit-hal config --local gc.auto 0;
#      if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules \
#          origin +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/* \
#          +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#        git -C /build/machinekit-hal checkout --progress --force \
#          refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#      elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules origin \
#          +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/*;
#        git -C /build/machinekit-hal checkout --progress --force \
#          -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
#      else
#        printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
#        exit 1;
#      fi
#      git -C /build/machinekit-hal log -1;"
#
#- name: Build and run tests
#  image: arm32v7/debian:buster
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - uname -a
#  - uname -m
#  - >
#    export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
#    ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
#  - apt-get update
#  - apt-get -y upgrade
#  - apt-get -y install sudo curl build-essential fakeroot devscripts python
#  - |
#    echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
#  - |
#    curl -1sLf                                                                      \
#      'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
#      | bash
#  - addgroup --gid 1000 machinekit
#  - |
#    adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
#      --disabled-password --gecos "" machinekit;
#  - |
#    su machinekit -c "whoami; \
#      cd /build/machinekit-hal; \
#      debian/bootstrap; \
#      mk-build-deps -irs sudo -t                                              \
#        'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
#      debian/ripruntests.py;"
#
#volumes:
#- name: repository
#  user: 1000
#  group: 1000
#  temp: {}
#
#---
kind: pipeline
name: Test build from binary TREE on Ubuntu 18.04 amd64

platform:
  arch: amd64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: ubuntu:bionic
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
kind: pipeline
name: Test build from binary TREE on Ubuntu 18.04 arm64

platform:
  arch: arm64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
    commands:
      - chown 1000:1000 /build

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build and run tests
    image: ubuntu:bionic
    volumes:
      - name: repository
        path: /build
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/runtests.py -j 12;"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}

---
# =======================================================================================
# Given how time expensive testing with Drone Cloud OSS Tier is, only build packages for
# and test them on the 'arm64' platform
# =======================================================================================

kind: pipeline
name: Build and test packages on Debian 11 arm64

platform:
  arch: arm64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
      - name: artifacts
        path: /artifacts
    commands:
      - chown 1000:1000 /build
      - chown 1000:1000 /artifacts

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build packages
    image: debian:bullseye
    volumes:
      - name: repository
        path: /build
      - name: artifacts
        path: /artifacts
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/configure.py -c; \
          debian/buildpackages.py -j 12; \
          find /build -type f \( -iname \*.deb -o -iname \*.ddeb \) -exec cp {} /artifacts \;"

  - name: Run runtests from installed tree
    image: debian:bullseye
    volumes:
      - name: artifacts
        path: /artifacts
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - apt-get install -y /artifacts/*.deb
      - echo "ANNOUNCE_IPV4=0" | tee -a /etc/machinekit/hal/machinekit.ini
      - echo "ANNOUNCE_IPV6=0" | tee -a /etc/machinekit/hal/machinekit.ini
      - |
        su machinekit -c "whoami; \
          run_runtests -v"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}
  - name: artifacts
    user: 1000
    group: 1000
    temp: {}

---
#kind: pipeline
#name: Build and test packages on Ubuntu 21.04 arm64
#
#platform:
#  arch: arm64
#
#clone:
#  disable: true
#
#steps:
#- name: Prepare Docker Drone volume
#  image: alpine
#  volumes:
#  - name: repository
#    path: /build
#  - name: artifacts
#    path: /artifacts
#  commands:
#  - chown 1000:1000 /build
#  - chown 1000:1000 /artifacts
#
#- name: Clone Machinekit-HAL repository
#  image: alpine/git
#  volumes:
#  - name: repository
#    path: /build
#  commands:
#  - addgroup --gid 1000 git
#  - |
#    adduser --uid 1000 --ingroup git --home /home/git \
#      --disabled-password --gecos "" git;
#  - |
#    su git -c "
#      git init /build/machinekit-hal;
#      git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
#      git -C /build/machinekit-hal config --local gc.auto 0;
#      if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules \
#          origin +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/* \
#          +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#        git -C /build/machinekit-hal checkout --progress --force \
#          refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
#      elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
#      then
#        git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
#          --progress --no-recurse-submodules origin \
#          +refs/heads/*:refs/remotes/origin/* \
#          +refs/tags/*:refs/tags/*;
#        git -C /build/machinekit-hal checkout --progress --force \
#          -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
#      else
#        printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
#        exit 1;
#      fi
#      git -C /build/machinekit-hal log -1;"
#
#- name: Build packages
#  image: ubuntu:hirsute
#  volumes:
#  - name: repository
#    path: /build
#  - name: artifacts
#    path: /artifacts
#  commands:
#  - uname -a
#  - uname -m
#  - >
#    export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
#    ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
#  - apt-get update
#  - apt-get -y upgrade
#  - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
#  - |
#    echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
#  - |
#    curl -1sLf                                                                      \
#      'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
#      | bash
#  - addgroup --gid 1000 machinekit
#  - |
#    adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
#      --disabled-password --gecos "" machinekit;
#  - |
#    curl -1vLf \
#      $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
#      jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
#      '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
#      --output /tmp/cmake.sh
#  - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
#  - |
#    su machinekit -c "whoami; \
#      cd /build/machinekit-hal; \
#      debian/bootstrap; \
#      mk-build-deps -irs sudo -t                                              \
#        'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
#      debian/configure.py -c; \
#      debian/buildpackages.py -j 12; \
#      find /build -type f \( -iname \*.deb -o -iname \*.ddeb \) -exec cp {} /artifacts \;"
#
#- name: Run runtests from installed tree
#  image: ubuntu:hirsute
#  volumes:
#  - name: artifacts
#    path: /artifacts
#  commands:
#  - uname -a
#  - uname -m
#  - >
#    export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
#    ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
#  - apt-get update
#  - apt-get -y upgrade
#  - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
#  - |
#    echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
#  - |
#    curl -1sLf                                                                      \
#      'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
#      | bash
#  - addgroup --gid 1000 machinekit
#  - |
#    adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
#      --disabled-password --gecos "" machinekit;
#  - |
#    curl -1vLf \
#      $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
#      jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
#      '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
#      --output /tmp/cmake.sh
#  - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
#  - apt-get install -y /artifacts/*.deb
#  - echo "ANNOUNCE_IPV4=0" | tee -a /etc/machinekit/hal/machinekit.ini
#  - echo "ANNOUNCE_IPV6=0" | tee -a /etc/machinekit/hal/machinekit.ini
#  - |
#    su machinekit -c "whoami; \
#      run_runtests -v"
#
#volumes:
#- name: repository
#  user: 1000
#  group: 1000
#  temp: {}
#- name: artifacts
#  user: 1000
#  group: 1000
#  temp: {}
#
#---
kind: pipeline
name: Build and test packages on Ubuntu 20.04 arm64

platform:
  arch: arm64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
      - name: artifacts
        path: /artifacts
    commands:
      - chown 1000:1000 /build
      - chown 1000:1000 /artifacts

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build packages
    image: ubuntu:focal
    volumes:
      - name: repository
        path: /build
      - name: artifacts
        path: /artifacts
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/configure.py -c; \
          debian/buildpackages.py -j 12; \
          find /build -type f \( -iname \*.deb -o -iname \*.ddeb \) -exec cp {} /artifacts \;"

  - name: Run runtests from installed tree
    image: ubuntu:focal
    volumes:
      - name: artifacts
        path: /artifacts
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - apt-get install -y /artifacts/*.deb
      - echo "ANNOUNCE_IPV4=0" | tee -a /etc/machinekit/hal/machinekit.ini
      - echo "ANNOUNCE_IPV6=0" | tee -a /etc/machinekit/hal/machinekit.ini
      - |
        su machinekit -c "whoami; \
          run_runtests -v"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}
  - name: artifacts
    user: 1000
    group: 1000
    temp: {}

---
kind: pipeline
name: Build and test packages on Ubuntu 18.04 arm64

platform:
  arch: arm64

clone:
  disable: true

steps:
  - name: Prepare Docker Drone volume
    image: alpine
    volumes:
      - name: repository
        path: /build
      - name: artifacts
        path: /artifacts
    commands:
      - chown 1000:1000 /build
      - chown 1000:1000 /artifacts

  - name: Clone Machinekit-HAL repository
    image: alpine/git
    volumes:
      - name: repository
        path: /build
    commands:
      - addgroup --gid 1000 git
      - |
        adduser --uid 1000 --ingroup git --home /home/git \
          --disabled-password --gecos "" git;
      - |
        su git -c "
          git init /build/machinekit-hal;
          git -C /build/machinekit-hal remote add origin ${DRONE_GIT_HTTP_URL};
          git -C /build/machinekit-hal config --local gc.auto 0;
          if [[ \"$DRONE_BUILD_EVENT\" == \"pull_request\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules \
              origin +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/* \
              +${DRONE_COMMIT_SHA}:refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
            git -C /build/machinekit-hal checkout --progress --force \
              refs/remotes/pull/${DRONE_PULL_REQUEST}/merge;
          elif [[ \"$DRONE_BUILD_EVENT\" == \"push\" ]]
          then
            git -C /build/machinekit-hal -c protocol.version=2 fetch --prune \
              --progress --no-recurse-submodules origin \
              +refs/heads/*:refs/remotes/origin/* \
              +refs/tags/*:refs/tags/*;
            git -C /build/machinekit-hal checkout --progress --force \
              -B ${DRONE_COMMIT_BRANCH} refs/remotes/origin/${DRONE_COMMIT_BRANCH};
          else
            printf \"ERROR: Unsupported event %s.\n\" \"$DRONE_BUILD_EVENT\";
            exit 1;
          fi
          git -C /build/machinekit-hal log -1;"

  - name: Build packages
    image: ubuntu:bionic
    volumes:
      - name: repository
        path: /build
      - name: artifacts
        path: /artifacts
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - |
        su machinekit -c "whoami; \
          cd /build/machinekit-hal; \
          debian/bootstrap; \
          mk-build-deps -irs sudo -t                                              \
            'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y'; \
          debian/configure.py -c; \
          debian/buildpackages.py -j 12; \
          find /build -type f \( -iname \*.deb -o -iname \*.ddeb \) -exec cp {} /artifacts \;"

  - name: Run runtests from installed tree
    image: ubuntu:bionic
    volumes:
      - name: artifacts
        path: /artifacts
    commands:
      - uname -a
      - uname -m
      - >
        export DEBIAN_FRONTEND=noninteractive ENV DEBCONF_NONINTERACTIVE_SEEN=true
        ENV LC_ALL=C.UTF-8 ENV LANGUAGE=C.UTF-8 ENV LANG=C.UTF-8
      - apt-get update
      - apt-get -y upgrade
      - apt-get -y install sudo curl build-essential fakeroot devscripts python equivs curl jq
      - |
        echo "ALL ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
      - |
        curl -1sLf                                                                      \
          'https://dl.cloudsmith.io/public/machinekit/machinekit/cfg/setup/bash.deb.sh' \
          | bash
      - addgroup --gid 1000 machinekit
      - |
        adduser --uid 1000 --ingroup machinekit --home /home/machinekit \
          --disabled-password --gecos "" machinekit;
      - |
        curl -1vLf \
          $(curl -s https://api.github.com/repos/kitware/cmake/releases/latest |  \
          jq -r --arg FILE "cmake-\d{1,}\.\d{1,}\.\d{1,}(-.{1,})?-linux-$(dpkg-architecture -qDEB_BUILD_GNU_CPU)\.sh" \
          '.assets | .[] | select(.name? | match($FILE)) | .browser_download_url') \
          --output /tmp/cmake.sh
      - bash /tmp/cmake.sh --skip-license --prefix=/usr/local
      - apt-get install -y /artifacts/*.deb
      - echo "ANNOUNCE_IPV4=0" | tee -a /etc/machinekit/hal/machinekit.ini
      - echo "ANNOUNCE_IPV6=0" | tee -a /etc/machinekit/hal/machinekit.ini
      - |
        su machinekit -c "whoami; \
          run_runtests -v"

volumes:
  - name: repository
    user: 1000
    group: 1000
    temp: {}
  - name: artifacts
    user: 1000
    group: 1000
    temp: {}
